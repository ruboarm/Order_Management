@page "/suppliers/update/{Id:int}"

<h3>Update Supplier: @Id</h3>

<EditForm Model="@supplier" OnValidSubmit="@Update">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table>
        <tbody>
            <tr>
                <td>Name</td>
                <td><InputText class="input-field" @bind-Value="@supplier.SupplierName" /></td>
            </tr>
            <tr>
                <td>Address Line 1</td>
                <td><InputText class="input-field" @bind-Value="@supplier.AddressLine1" /></td>
            </tr>
            <tr>
                <td>Address Line 2</td>
                <td><InputText class="input-field" @bind-Value="@supplier.AddressLine2" /></td>
            </tr>
            <tr>
                <td>City</td>
                <td><InputText class="input-field" @bind-Value="@supplier.City" /></td>
            </tr>
            <tr>
                <td>Postal Code</td>
                <td><InputNumber class="input-field" @bind-Value="@supplier.PostalCode" /></td>
            </tr>
            <tr>
                <td>State</td>
                <InputSelect class="input-field" @bind-Value="@supplier.State" @onchange="UpdateState">
                    @foreach (var state in states)
                    {
                        <option value="@state">@state</option>
                    }
                </InputSelect>
            </tr>
        </tbody>
    </table>



    <div style="margin-top: 20px;">
        <button class="btn btn-success" type="submit">Update</button>
        <a class="btn btn-danger" @onclick="@(e => DeleteSupplier(supplier.Id))">Delete</a>
        <a class="btn btn-primary" href="suppliers">Cancel</a>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private Supplier supplier = new Supplier();

    private List<string> states = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        supplier = await _dataProvider.GetSupplierByIdAsync(Id);
        if (supplier != null)
        {
            SelectedString = supplier.State;
            states = _dataProvider.GetStates();
        }
        else
        {
            _navigationManager.NavigateTo("/suppliers", true);
        }
    }

    private async void Update()
    {
        await _dataProvider.UpdateSupplierAsync(supplier);
        _navigationManager.NavigateTo("/suppliers", true);
    }

    private async void DeleteSupplier(int id)
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            var status = await _dataProvider.DeleteSupplierAsync(id);
            _navigationManager.NavigateTo("/suppliers", true);
        }
    }


    string SelectedString = Lists.GetStates()[0];

    void UpdateState(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        supplier.State = e.Value.ToString();
    }
}
